# 数据容器:
**定义：**
一种可以容纳多份数据的数据类型，容纳的每一份数据,称久为一个元素。每一个元素,可以是任意类型的数据,如:字符串、数字、布尔等。
**数据容器以①是否支持重重元素,②是否可以修改③是否有序等.
分为5类:
列表(list)、元组(tuple)
字符串(str)、集合(set)、字典(dict)**
# 列表:
## 定义
**1.定义格式:**
```python
#字面量
[元素1,元素2,元素了..,元素4]
#定义变量
变量名称=[元素1,.....]
#定义空列表
变量名称=[    ]
变量名称=list()
```
*2.注:
列表可以一次存储多个数据.且可以是不同类型的数据
支持嵌套*
**3、列表的下标索引(可以取出特定位置的元素)**

## 列表的常用操作	
*list中提供多种方法(函数)*
### 1.查找某元素的下标
功能:
查找指定函数在列表的下标,如果找不到,报错ValueError
语法:
列表.index(元素)       要用变量接收.
(index就是列表对象(变量)内置的方法(函数))
### 2.修改特定位置的(索列)的元素值
语法:
列表【下标】=值
### 3.插入元素:
语法:
列表.insert(下标,元素),在指定下标位置,插入指定元素
### 4.追加元素(单个)
语法:
列表.append(元素),  将指定元素,追加到列表的尾数
### 5.追加一批元素:
语法:
列表.extend(其它数据客器),  将其他数据容器的内容取出,依次追加到列表的尾数.
### 6.删除元素:
语法1:
del列表【下标】
语法2：
列表.Pop(下标)→可以将删除元素当返回值得到
### 7.对指定内容的删除
语法:
列表.remove(元素)
注:从前到后搜索,找到第一个该元素删除
### 8.清空列表内容:
语法:
列表.clear( )
### 9.统计某元素在列表内的数量
语法:
列表.count(元素) 
### 10.列表的编历:
eg:
```python
index=0
while index<len(列表)
    元素=列表[index]   #while循环遍历
    #对元素进行处理
    index+=1
for 临时变量 in 数据容器：
    对临时变量进行处理
```

# 元组:
**一旦定义完成就不可修改.**
## 定义：
元组定义:定义元组使用小括号，且使用逗号隔开各个数据，数据可以是不同的数据类型
```python
#定义元组变量 
(元素,元素..,元素)
#定义元组变量
变量名称=(元素,无素..,无素)
#定义空元组
变量名称=(  )
变量名称=tuple(  )	
```
元组也支持嵌套:
```python
t1 = ( (1, 2, 3),(4，5，6)
print(t1[0][0]) # 结果: 1
```
**注意**
```python
#定义3个元素的元组
t1 = (1，"Hello', True)
	  
# 定义1个元素的元组
t2 = ('Hello',)
# 注意，必须带有逗号，否则不是元组类型
```
**注意**
元组只有一个数据，这个数据后面要添加逗号
## 元组的相关操作
1.index( )
查找某个数据，如果数据存在返回对应的下标，否则报错
2.count( )
统计某个数据在当前元组出现的次数
```python
# 根据下标(索引) 取出数据
t1 = (1，2，'hello')
print(t1[2]) # 结果:'hello'
# 根据index()，查找特定元素的第一个匹配项
t1 = (1， 2,'hel1o'， 3，4,'he11o')
print(t1.index('hello'))# 结果:2
# 统计某个数据在元组内出现的次数
t1 = (1， 2，'hello'， 3， 4，'hello')
print(t1.count('hello')) # 结果:2
```
3.元组的遍历
while循环
```python
my_tuple = (1，2，3，4，5)
index = 0
while index < len(my_tuple):
    print(my_tuple[index])
    index += 1
```
for循环
```python
my_tuple = (1，2，3，4，5)
for i in my_tuple:
    print(i)
```

**注意事项:
元组由于不可修改的特性，所以其提作方法非常少
不可以修改元组的内容，否则会直接报错
可以修改元组内的 list 的内容(修改元素、增加、删除、反转等)**
# 集合:
## 分类
1.可变集合  Set:
可以添加和删除元素.
2.不可变集合   Frozenset:
不可以添加和删除元素
## 集合的创建,
无重复元素,不支持下标索引
```python
s1=set( )                             #创造空集
s2:={2,4,6}                           #创建数值集合
S3=set((1,3,5))	                      #从元组创建集合	
S4=set([x* 2 for x in range (1,10)])  #从列表创建集合
```

*①可以从list(set)或tple(set)从集合创建一个列表或元组
②.一个集合可以包含类型相同或不同的元素.*
注,集合可以容纳数值,字符串,元组和布尔变量，但集合不可以容纳列表或者其他集合.
## 集合的添加和删除
①添加语法:set【集合】.add(元素)
要添加的元素内容,只能使用字符串,数字及布尔类型的True和False
不能使用列表,无组等可迭代对象.
②删除语法: 可以使用del命令删除整个集合,
                   也可以用pop(  )方法 或 remove(  )方法删除一个元素（随机取出）
                   也可以使用集合对象的clear(  )方法清空集合,即删除所有集合元素
### 集合运算:
**求开集:**
使用union方法或者"|"运算符来实现
eg：
```python
S1={1,2,3}
S2={4,5,6} 
S1.union（S2）
S1|S2
```
**求交集:**
使用intersection方法或"&"运算符来实现
**求差集:**
使用difference 或 "-"运算符来实现
eg:
```python
s1={2,4,1}	        #s1与s2之间的差集是一个	
s2={3,1,5}	        #包含了出现在S1但不出	
s1.difference（s2）	#现在S2的元素的集合	
{2,4}
S1-S2     	        #集合1.difference_update(集合2)	
{2，4}              #结果:集合1被修改,集合2不变
```

# 字典:
*通过名称来访问其各个值的数据结构
这种结构称之为:映射         即:Dictionary*
## 字典的构建.     Key:Value	
```python
dict=['name': 'earth', 'port':10]
dictionary={}         #创建一空字典 
dictionary=dict(  )   #创建一个空字典
```
*字典无法运用下标索引,只能用Key来取得Value值
key无法重复,从左向右将key对应value覆盖*
用key调用value
      变量=字典["key"]
**字典的key和value可以是任意数据类型(key不可为字典）
表明,字典是可以嵌套**
## 常用操作
**新增元素：**
语法:字典[Key]=Value,
结果:字典被修改,新增了元素
**更新元素:**
语法:字典[key]=Value,
结果:字典被修改,元素被更新
.注,字典Key不可以重复.所以对己存在的key执行上述操作,就是更新Value值
**删除元素:**
语法:字典.pop(key)
结果:获得指定key的value
同时字典被修改,指定Key的数据被删除
**清空字典:**
语法:字典.clear( )
结果:字典被修改,元素被清空
### 字典的遍历
#### 获取全部元素的Key:
语法:字典.keys( )
结果得到字典中的全部key
#### 遍历字典:
1.通过  keys for key in keys:
                 ....操作	                  	
2:直接对字典:    
   for key in 字典：
效果相同

# 数据容器的通用操作方法
len    (容器)
统计容器的元素个数 
max  (容器)
统计容器的最大元素
min（容器）
统计容器的最小元素
容器的通用转换功能	
str(容器)	         将给定容器转换为字符串
list(容器)           将给定容器转换为列表
tuple（容器）  将给定容器转换为元组 
set容器)            将给定容器转换为集合
通用排序工具
sorted (容器,[ reverse=True])
将给定容器进行排序
排序结果:都成列表对象(字典会丢失value）
